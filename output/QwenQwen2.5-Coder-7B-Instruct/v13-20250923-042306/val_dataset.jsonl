{"messages": [{"role": "system", "content": "Fuzzing expert for memory-unsafe code. Target: cjson.\n\nINPUTS:\n- Headers: cJSON.h\n- Vulnerable APIs:\n----------------------\n[{'cJSON_Version': {'ret_type': 'char', 'param_types': ['void']}, 'cJSON_PrintUnformatted': {'ret_type': 'char', 'param_types': ['cJSON']}, 'cJSON_AddItemToObject': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON', 'char', 'cJSON']}, 'cJSON_Print': {'ret_type': 'char', 'param_types': ['cJSON']}, 'cJSON_GetStringValue': {'ret_type': 'char', 'param_types': ['cJSON']}, 'cJSON_IsArray': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON']}, 'cJSON_IsObject': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON']}, 'cJSON_GetErrorPtr': {'ret_type': 'char', 'param_types': ['void']}, 'cJSON_CreateObjectReference': {'ret_type': 'cJSON', 'param_types': ['cJSON']}, 'cJSON_AddObjectToObject': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'char']}, 'cJSON_AddStringToObject': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'char', 'char']}, 'cJSON_CreateStringReference': {'ret_type': 'cJSON', 'param_types': ['char']}, 'cJSON_AddRawToObject': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'char', 'char']}, 'cJSON_AddArrayToObject': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'char']}, 'cJSON_GetArraySize': {'ret_type': 'int', 'param_types': ['cJSON']}, 'cJSON_IsInvalid': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON']}, 'cJSON_CreateTrue': {'ret_type': 'cJSON', 'param_types': ['void']}, 'cJSON_CreateFalse': {'ret_type': 'cJSON', 'param_types': ['void']}, 'cJSON_Delete': {'ret_type': 'void', 'param_types': ['cJSON']}, 'cJSON_GetNumberValue': {'ret_type': 'double', 'param_types': ['cJSON']}, 'cJSON_ParseWithOpts': {'ret_type': 'cJSON', 'param_types': ['char', 'char', 'cJSON_bool']}, 'cJSON_DeleteItemFromArray': {'ret_type': 'void', 'param_types': ['cJSON', 'int']}, 'cJSON_ParseWithLengthOpts': {'ret_type': 'cJSON', 'param_types': ['char', 'size_t', 'char', 'cJSON_bool']}, 'cJSON_DetachItemFromObject': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'char']}, 'cJSON_SetValuestring': {'ret_type': 'char', 'param_types': ['cJSON', 'char']}, 'cJSON_ReplaceItemInObject': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON', 'char', 'cJSON']}, 'cJSON_AddItemReferenceToArray': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON', 'cJSON']}, 'cJSON_AddItemReferenceToObject': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON', 'char', 'cJSON']}, 'cJSON_ReplaceItemInObjectCaseSensitive': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON', 'char', 'cJSON']}, 'cJSON_AddItemToArray': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON', 'cJSON']}, 'cJSON_IsNumber': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON']}, 'cJSON_CreateStringArray': {'ret_type': 'cJSON', 'param_types': ['char', 'int']}, 'cJSON_IsString': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON']}, 'cJSON_InitHooks': {'ret_type': 'void', 'param_types': ['cJSON_Hooks']}, 'cJSON_AddItemToObjectCS': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON', 'char', 'cJSON']}, 'cJSON_Parse': {'ret_type': 'cJSON', 'param_types': ['char']}, 'cJSON_CreateRaw': {'ret_type': 'cJSON', 'param_types': ['char']}, 'cJSON_ParseWithLength': {'ret_type': 'cJSON', 'param_types': ['char', 'size_t']}, 'cJSON_CreateString': {'ret_type': 'cJSON', 'param_types': ['char']}, 'cJSON_GetObjectItem': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'char']}, 'cJSON_CreateIntArray': {'ret_type': 'cJSON', 'param_types': ['int', 'int']}, 'cJSON_GetArrayItem': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'int']}, 'cJSON_CreateArrayReference': {'ret_type': 'cJSON', 'param_types': ['cJSON']}, 'cJSON_IsFalse': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON']}, 'cJSON_CreateFloatArray': {'ret_type': 'cJSON', 'param_types': ['float', 'int']}, 'cJSON_AddBoolToObject': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'char', 'cJSON_bool']}, 'cJSON_IsTrue': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON']}, 'cJSON_CreateDoubleArray': {'ret_type': 'cJSON', 'param_types': ['double', 'int']}, 'cJSON_AddNumberToObject': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'char', 'double']}, 'cJSON_CreateNull': {'ret_type': 'cJSON', 'param_types': ['void']}, 'cJSON_IsRaw': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON']}, 'cJSON_Compare': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON', 'cJSON', 'cJSON_bool']}, 'cJSON_Duplicate': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'cJSON_bool']}, 'cJSON_ReplaceItemViaPointer': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON', 'cJSON', 'cJSON']}, 'cJSON_ReplaceItemInArray': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON', 'int', 'cJSON']}, 'cJSON_CreateBool': {'ret_type': 'cJSON', 'param_types': ['cJSON_bool']}, 'cJSON_CreateArray': {'ret_type': 'cJSON', 'param_types': ['void']}, 'cJSON_DetachItemViaPointer': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'cJSON']}, 'cJSON_DetachItemFromObjectCaseSensitive': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'char']}, 'cJSON_CreateNumber': {'ret_type': 'cJSON', 'param_types': ['double']}, 'cJSON_CreateObject': {'ret_type': 'cJSON', 'param_types': ['void']}, 'cJSON_DetachItemFromArray': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'int']}, 'cJSON_DeleteItemFromObject': {'ret_type': 'void', 'param_types': ['cJSON', 'char']}, 'cJSON_PrintPreallocated': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON', 'char', 'int', 'cJSON_bool']}, 'cJSON_PrintBuffered': {'ret_type': 'char', 'param_types': ['cJSON', 'int', 'cJSON_bool']}, 'cJSON_IsBool': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON']}, 'cJSON_IsNull': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON']}, 'cJSON_InsertItemInArray': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON', 'int', 'cJSON']}, 'cJSON_AddNullToObject': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'char']}, 'cJSON_SetNumberHelper': {'ret_type': 'double', 'param_types': ['cJSON', 'double']}, 'cJSON_malloc': {'ret_type': 'void', 'param_types': ['size_t']}, 'cJSON_GetObjectItemCaseSensitive': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'char']}, 'cJSON_DeleteItemFromObjectCaseSensitive': {'ret_type': 'void', 'param_types': ['cJSON', 'char']}, 'cJSON_Minify': {'ret_type': 'void', 'param_types': ['char']}, 'cJSON_AddTrueToObject': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'char']}, 'cJSON_HasObjectItem': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON', 'char']}, 'cJSON_AddFalseToObject': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'char']}, 'cJSON_free': {'ret_type': 'void', 'param_types': ['void']}}, {'cJSON_bool': 'typedef int cJSON_bool;', 'cJSON': \"typedef struct cJSON\\n{\\n    /* next/prev allow you to walk array/object chains. Alternatively, use GetArraySize/GetArrayItem/GetObjectItem */\\n    struct cJSON *next;\\n    struct cJSON *prev;\\n    /* An array or object item will have a child pointer pointing to a chain of the items in the array/object. */\\n    struct cJSON *child;\\n\\n    /* The type of the item, as above. */\\n    int type;\\n\\n    /* The item's string, if type==cJSON_String  and type == cJSON_Raw */\\n    char *valuestring;\\n    /* writing to valueint is DEPRECATED, use cJSON_SetNumberValue instead */\\n    int valueint;\\n    /* The item's number, if type==cJSON_Number */\\n    double valuedouble;\\n\\n    /* The item's name string, if this item is the child of, or is in the list of subitems of an object. */\\n    char *string;\\n} cJSON;\", 'cJSON_Hooks': 'typedef struct cJSON_Hooks\\n{\\n      /* malloc/free are CDECL on Windows regardless of the default calling convention of the compiler, so ensure the hooks allow passing those functions directly. */\\n      void *(CJSON_CDECL *malloc_fn)(size_t sz);\\n      void (CJSON_CDECL *free_fn)(void *ptr);\\n} cJSON_Hooks;'}]\n----------------------\n\nREQUIREMENTS:\n- libFuzzer entry point\n- Output wrapped in ```cpp```"}, {"role": "user", "content": "Implement:\n1. Parser-renderer chain with state carry\n2. fmemopen() for input streams\n3. 20% out-of-bounds access attempts\n4. Mark `// MEMORY CORRUPTION: `\n5. Verify allocator integrity post-execution\n6. Output files to /workspace/output/projects/cjson/work/tem only"}]}
{"messages": [{"role": "system", "content": "Fuzz harness architect for cjson. Signature: `extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)`.\n\nRESOURCES:\n- Headers: cJSON.h\n- API specifications:\n[{'cJSON_CreateFloatArray': {'ret_type': 'cJSON', 'param_types': ['float', 'int']}, 'cJSON_ReplaceItemInObject': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON', 'char', 'cJSON']}, 'cJSON_Duplicate': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'cJSON_bool']}, 'cJSON_CreateDoubleArray': {'ret_type': 'cJSON', 'param_types': ['double', 'int']}, 'cJSON_ReplaceItemInObjectCaseSensitive': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON', 'char', 'cJSON']}, 'cJSON_ParseWithOpts': {'ret_type': 'cJSON', 'param_types': ['char', 'char', 'cJSON_bool']}, 'cJSON_ParseWithLengthOpts': {'ret_type': 'cJSON', 'param_types': ['char', 'size_t', 'char', 'cJSON_bool']}, 'cJSON_Compare': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON', 'cJSON', 'cJSON_bool']}, 'cJSON_ReplaceItemViaPointer': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON', 'cJSON', 'cJSON']}, 'cJSON_Version': {'ret_type': 'char', 'param_types': ['void']}, 'cJSON_PrintBuffered': {'ret_type': 'char', 'param_types': ['cJSON', 'int', 'cJSON_bool']}, 'cJSON_IsFalse': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON']}, 'cJSON_IsArray': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON']}, 'cJSON_CreateStringReference': {'ret_type': 'cJSON', 'param_types': ['char']}, 'cJSON_AddBoolToObject': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'char', 'cJSON_bool']}, 'cJSON_IsTrue': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON']}, 'cJSON_IsObject': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON']}, 'cJSON_ReplaceItemInArray': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON', 'int', 'cJSON']}, 'cJSON_AddNumberToObject': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'char', 'double']}, 'cJSON_GetObjectItemCaseSensitive': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'char']}, 'cJSON_GetNumberValue': {'ret_type': 'double', 'param_types': ['cJSON']}, 'cJSON_InsertItemInArray': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON', 'int', 'cJSON']}, 'cJSON_HasObjectItem': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON', 'char']}, 'cJSON_InitHooks': {'ret_type': 'void', 'param_types': ['cJSON_Hooks']}, 'cJSON_CreateObjectReference': {'ret_type': 'cJSON', 'param_types': ['cJSON']}, 'cJSON_DeleteItemFromObjectCaseSensitive': {'ret_type': 'void', 'param_types': ['cJSON', 'char']}, 'cJSON_PrintPreallocated': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON', 'char', 'int', 'cJSON_bool']}, 'cJSON_AddItemReferenceToArray': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON', 'cJSON']}, 'cJSON_DeleteItemFromArray': {'ret_type': 'void', 'param_types': ['cJSON', 'int']}, 'cJSON_AddStringToObject': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'char', 'char']}, 'cJSON_AddItemReferenceToObject': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON', 'char', 'cJSON']}, 'cJSON_DetachItemFromObject': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'char']}, 'cJSON_AddRawToObject': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'char', 'char']}, 'cJSON_IsInvalid': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON']}, 'cJSON_SetNumberHelper': {'ret_type': 'double', 'param_types': ['cJSON', 'double']}, 'cJSON_Parse': {'ret_type': 'cJSON', 'param_types': ['char']}, 'cJSON_CreateBool': {'ret_type': 'cJSON', 'param_types': ['cJSON_bool']}, 'cJSON_ParseWithLength': {'ret_type': 'cJSON', 'param_types': ['char', 'size_t']}, 'cJSON_CreateNumber': {'ret_type': 'cJSON', 'param_types': ['double']}, 'cJSON_GetStringValue': {'ret_type': 'char', 'param_types': ['cJSON']}, 'cJSON_CreateArray': {'ret_type': 'cJSON', 'param_types': ['void']}, 'cJSON_AddNullToObject': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'char']}, 'cJSON_AddTrueToObject': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'char']}, 'cJSON_CreateObject': {'ret_type': 'cJSON', 'param_types': ['void']}, 'cJSON_AddFalseToObject': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'char']}, 'cJSON_GetErrorPtr': {'ret_type': 'char', 'param_types': ['void']}, 'cJSON_Minify': {'ret_type': 'void', 'param_types': ['char']}, 'cJSON_PrintUnformatted': {'ret_type': 'char', 'param_types': ['cJSON']}, 'cJSON_CreateArrayReference': {'ret_type': 'cJSON', 'param_types': ['cJSON']}, 'cJSON_SetValuestring': {'ret_type': 'char', 'param_types': ['cJSON', 'char']}, 'cJSON_Print': {'ret_type': 'char', 'param_types': ['cJSON']}, 'cJSON_GetArrayItem': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'int']}, 'cJSON_CreateIntArray': {'ret_type': 'cJSON', 'param_types': ['int', 'int']}, 'cJSON_AddItemToObject': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON', 'char', 'cJSON']}, 'cJSON_IsBool': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON']}, 'cJSON_IsNull': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON']}, 'cJSON_GetObjectItem': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'char']}, 'cJSON_IsNumber': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON']}, 'cJSON_IsString': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON']}, 'cJSON_AddItemToObjectCS': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON', 'char', 'cJSON']}, 'cJSON_GetArraySize': {'ret_type': 'int', 'param_types': ['cJSON']}, 'cJSON_CreateStringArray': {'ret_type': 'cJSON', 'param_types': ['char', 'int']}, 'cJSON_DetachItemFromObjectCaseSensitive': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'char']}, 'cJSON_DeleteItemFromObject': {'ret_type': 'void', 'param_types': ['cJSON', 'char']}, 'cJSON_Delete': {'ret_type': 'void', 'param_types': ['cJSON']}, 'cJSON_DetachItemViaPointer': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'cJSON']}, 'cJSON_DetachItemFromArray': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'int']}, 'cJSON_AddItemToArray': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON', 'cJSON']}, 'cJSON_malloc': {'ret_type': 'void', 'param_types': ['size_t']}, 'cJSON_CreateNull': {'ret_type': 'cJSON', 'param_types': ['void']}, 'cJSON_CreateTrue': {'ret_type': 'cJSON', 'param_types': ['void']}, 'cJSON_CreateString': {'ret_type': 'cJSON', 'param_types': ['char']}, 'cJSON_CreateFalse': {'ret_type': 'cJSON', 'param_types': ['void']}, 'cJSON_free': {'ret_type': 'void', 'param_types': ['void']}, 'cJSON_IsRaw': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON']}, 'cJSON_AddObjectToObject': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'char']}, 'cJSON_AddArrayToObject': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'char']}, 'cJSON_CreateRaw': {'ret_type': 'cJSON', 'param_types': ['char']}}, {'cJSON_bool': 'typedef int cJSON_bool;', 'cJSON': \"typedef struct cJSON\\n{\\n    /* next/prev allow you to walk array/object chains. Alternatively, use GetArraySize/GetArrayItem/GetObjectItem */\\n    struct cJSON *next;\\n    struct cJSON *prev;\\n    /* An array or object item will have a child pointer pointing to a chain of the items in the array/object. */\\n    struct cJSON *child;\\n\\n    /* The type of the item, as above. */\\n    int type;\\n\\n    /* The item's string, if type==cJSON_String  and type == cJSON_Raw */\\n    char *valuestring;\\n    /* writing to valueint is DEPRECATED, use cJSON_SetNumberValue instead */\\n    int valueint;\\n    /* The item's number, if type==cJSON_Number */\\n    double valuedouble;\\n\\n    /* The item's name string, if this item is the child of, or is in the list of subitems of an object. */\\n    char *string;\\n} cJSON;\", 'cJSON_Hooks': 'typedef struct cJSON_Hooks\\n{\\n      /* malloc/free are CDECL on Windows regardless of the default calling convention of the compiler, so ensure the hooks allow passing those functions directly. */\\n      void *(CJSON_CDECL *malloc_fn)(size_t sz);\\n      void (CJSON_CDECL *free_fn)(void *ptr);\\n} cJSON_Hooks;'}]\n\nMANDATES:\n▸ Output compilable C++ in ```cpp```\n▸ Complete lifecycle management"}, {"role": "user", "content": "Develop:\n1. Multi-object interaction sequence\n2. fmemopen() for input streams\n3. 15% dangling pointer scenarios\n4. Comment `// OBJECT LIFETIME: `\n5. Validate reference counts post-execution\n6. Output files to /workspace/output/projects/cjson/work/tem only"}]}
{"messages": [{"role": "system", "content": "# Role: Vulnerability Hunter\nObjective: Build exploit-provoking harness for cjson\n\nCONTEXT:\n- Headers: cJSON.h\n- Sensitive APIs:\n----------------------\n[{'cJSON_PrintUnformatted': {'ret_type': 'char', 'param_types': ['cJSON']}, 'cJSON_CreateBool': {'ret_type': 'cJSON', 'param_types': ['cJSON_bool']}, 'cJSON_CreateFloatArray': {'ret_type': 'cJSON', 'param_types': ['float', 'int']}, 'cJSON_CreateNumber': {'ret_type': 'cJSON', 'param_types': ['double']}, 'cJSON_CreateDoubleArray': {'ret_type': 'cJSON', 'param_types': ['double', 'int']}, 'cJSON_Print': {'ret_type': 'char', 'param_types': ['cJSON']}, 'cJSON_ReplaceItemViaPointer': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON', 'cJSON', 'cJSON']}, 'cJSON_ReplaceItemInArray': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON', 'int', 'cJSON']}, 'cJSON_AddBoolToObject': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'char', 'cJSON_bool']}, 'cJSON_IsArray': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON']}, 'cJSON_DeleteItemFromObjectCaseSensitive': {'ret_type': 'void', 'param_types': ['cJSON', 'char']}, 'cJSON_AddStringToObject': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'char', 'char']}, 'cJSON_AddObjectToObject': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'char']}, 'cJSON_IsObject': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON']}, 'cJSON_AddNumberToObject': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'char', 'double']}, 'cJSON_AddRawToObject': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'char', 'char']}, 'cJSON_AddArrayToObject': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'char']}, 'cJSON_GetObjectItemCaseSensitive': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'char']}, 'cJSON_HasObjectItem': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON', 'char']}, 'cJSON_InsertItemInArray': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON', 'int', 'cJSON']}, 'cJSON_IsRaw': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON']}, 'cJSON_CreateTrue': {'ret_type': 'cJSON', 'param_types': ['void']}, 'cJSON_CreateObjectReference': {'ret_type': 'cJSON', 'param_types': ['cJSON']}, 'cJSON_DeleteItemFromArray': {'ret_type': 'void', 'param_types': ['cJSON', 'int']}, 'cJSON_CreateFalse': {'ret_type': 'cJSON', 'param_types': ['void']}, 'cJSON_DetachItemFromObject': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'char']}, 'cJSON_CreateStringReference': {'ret_type': 'cJSON', 'param_types': ['char']}, 'cJSON_InitHooks': {'ret_type': 'void', 'param_types': ['cJSON_Hooks']}, 'cJSON_ReplaceItemInObject': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON', 'char', 'cJSON']}, 'cJSON_malloc': {'ret_type': 'void', 'param_types': ['size_t']}, 'cJSON_ReplaceItemInObjectCaseSensitive': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON', 'char', 'cJSON']}, 'cJSON_free': {'ret_type': 'void', 'param_types': ['void']}, 'cJSON_Version': {'ret_type': 'char', 'param_types': ['void']}, 'cJSON_CreateNull': {'ret_type': 'cJSON', 'param_types': ['void']}, 'cJSON_SetValuestring': {'ret_type': 'char', 'param_types': ['cJSON', 'char']}, 'cJSON_Delete': {'ret_type': 'void', 'param_types': ['cJSON']}, 'cJSON_IsFalse': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON']}, 'cJSON_IsTrue': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON']}, 'cJSON_DetachItemFromObjectCaseSensitive': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'char']}, 'cJSON_GetStringValue': {'ret_type': 'char', 'param_types': ['cJSON']}, 'cJSON_CreateRaw': {'ret_type': 'cJSON', 'param_types': ['char']}, 'cJSON_DeleteItemFromObject': {'ret_type': 'void', 'param_types': ['cJSON', 'char']}, 'cJSON_GetArraySize': {'ret_type': 'int', 'param_types': ['cJSON']}, 'cJSON_GetErrorPtr': {'ret_type': 'char', 'param_types': ['void']}, 'cJSON_CreateString': {'ret_type': 'cJSON', 'param_types': ['char']}, 'cJSON_AddItemToObjectCS': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON', 'char', 'cJSON']}, 'cJSON_CreateStringArray': {'ret_type': 'cJSON', 'param_types': ['char', 'int']}, 'cJSON_Minify': {'ret_type': 'void', 'param_types': ['char']}, 'cJSON_PrintBuffered': {'ret_type': 'char', 'param_types': ['cJSON', 'int', 'cJSON_bool']}, 'cJSON_IsBool': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON']}, 'cJSON_AddTrueToObject': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'char']}, 'cJSON_IsNull': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON']}, 'cJSON_AddFalseToObject': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'char']}, 'cJSON_AddItemToArray': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON', 'cJSON']}, 'cJSON_AddNullToObject': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'char']}, 'cJSON_IsNumber': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON']}, 'cJSON_DetachItemViaPointer': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'cJSON']}, 'cJSON_IsString': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON']}, 'cJSON_DetachItemFromArray': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'int']}, 'cJSON_PrintPreallocated': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON', 'char', 'int', 'cJSON_bool']}, 'cJSON_IsInvalid': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON']}, 'cJSON_AddItemReferenceToArray': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON', 'cJSON']}, 'cJSON_AddItemReferenceToObject': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON', 'char', 'cJSON']}, 'cJSON_GetNumberValue': {'ret_type': 'double', 'param_types': ['cJSON']}, 'cJSON_CreateArray': {'ret_type': 'cJSON', 'param_types': ['void']}, 'cJSON_CreateObject': {'ret_type': 'cJSON', 'param_types': ['void']}, 'cJSON_SetNumberHelper': {'ret_type': 'double', 'param_types': ['cJSON', 'double']}, 'cJSON_ParseWithOpts': {'ret_type': 'cJSON', 'param_types': ['char', 'char', 'cJSON_bool']}, 'cJSON_Parse': {'ret_type': 'cJSON', 'param_types': ['char']}, 'cJSON_ParseWithLength': {'ret_type': 'cJSON', 'param_types': ['char', 'size_t']}, 'cJSON_ParseWithLengthOpts': {'ret_type': 'cJSON', 'param_types': ['char', 'size_t', 'char', 'cJSON_bool']}, 'cJSON_GetObjectItem': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'char']}, 'cJSON_CreateIntArray': {'ret_type': 'cJSON', 'param_types': ['int', 'int']}, 'cJSON_AddItemToObject': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON', 'char', 'cJSON']}, 'cJSON_Compare': {'ret_type': 'cJSON_bool', 'param_types': ['cJSON', 'cJSON', 'cJSON_bool']}, 'cJSON_GetArrayItem': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'int']}, 'cJSON_CreateArrayReference': {'ret_type': 'cJSON', 'param_types': ['cJSON']}, 'cJSON_Duplicate': {'ret_type': 'cJSON', 'param_types': ['cJSON', 'cJSON_bool']}}, {'cJSON_bool': 'typedef int cJSON_bool;', 'cJSON': \"typedef struct cJSON\\n{\\n    /* next/prev allow you to walk array/object chains. Alternatively, use GetArraySize/GetArrayItem/GetObjectItem */\\n    struct cJSON *next;\\n    struct cJSON *prev;\\n    /* An array or object item will have a child pointer pointing to a chain of the items in the array/object. */\\n    struct cJSON *child;\\n\\n    /* The type of the item, as above. */\\n    int type;\\n\\n    /* The item's string, if type==cJSON_String  and type == cJSON_Raw */\\n    char *valuestring;\\n    /* writing to valueint is DEPRECATED, use cJSON_SetNumberValue instead */\\n    int valueint;\\n    /* The item's number, if type==cJSON_Number */\\n    double valuedouble;\\n\\n    /* The item's name string, if this item is the child of, or is in the list of subitems of an object. */\\n    char *string;\\n} cJSON;\", 'cJSON_Hooks': 'typedef struct cJSON_Hooks\\n{\\n      /* malloc/free are CDECL on Windows regardless of the default calling convention of the compiler, so ensure the hooks allow passing those functions directly. */\\n      void *(CJSON_CDECL *malloc_fn)(size_t sz);\\n      void (CJSON_CDECL *free_fn)(void *ptr);\\n} cJSON_Hooks;'}]\n----------------------\n\nCONSTRAINTS:\n- Standard libFuzzer signature\n- Output compilable C++ in ```cpp```"}, {"role": "user", "content": "Generate:\n1. Parser-renderer-cleaner chain\n2. Input via fmemopen() streams\n3. 25% deliberate overflow attempts\n4. Mark with `// EXPLOIT VECTOR: `\n5. Verify memory guards post-execution\n6. Direct outputs to /workspace/output/projects/cjson/work/tem"}]}
