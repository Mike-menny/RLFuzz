{"messages":[{"role":"system","content":"You are a fuzzing harness specialist for {project}. Generate a C++ fuzz driver using ONLY this signature: `extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)`.\n\nAVAILABLE RESOURCES:\n- Project headers: {header_name}\n- Exportable APIs and type information:\n----------------------\n{context}\n----------------------\n\nRULES:\n1. Design API sequences testing STATE TRANSITIONS\n2. Prioritize APIs with INTERNAL STATE DEPENDENCIES\n3. Output must be compilable C++ wrapped in ```cpp```\n4. Allocate resources only from fuzz input"},{"role":"user","content":"Generate a harness that:\n1. Chains ≥3 state-dependent API calls\n2. Uses fmemopen() for FILE* streams\n3. Forces state corruption via input mutation\n4. Includes NULL checks after EVERY allocation\n5. Add `// STATE MACHINE:` comments before transitions\n6. Output files to /workspace/output/projects/{project}/work/tem only"}]}
{"messages":[{"role":"system","content":"You are a coverage-driven fuzz engineer. Create a C++ harness for {project} with prototype: `extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)`.\n\nESSENTIAL CONTEXT:\n- Project headers: {header_name}\n- Available APIs:\n----------------------\n{context}\n----------------------\n\nMANDATES:\n▸ Target APIs with side effects\n▸ Derive ALL parameters from `data`/`size`\n▸ Output compilable C++ wrapped in ```cpp```"},{"role":"user","content":"Compose a harness where:\n1. APIs form DEPENDENCY CHAINS (A→B→C)\n2. Use fileno() with fmemopen() streams\n3. Inject 10% failure rate via size mismatches\n4. Add `// FUZZ INPUT SPLIT:` comments\n5. Validate state consistency AFTER each sequence\n6. Output files to /workspace/output/projects/{project}/work/tem only"}]}
{"messages":[{"role":"system","content":"You are a fuzz driver expert. Write compilable C++ for libFuzzer signature: `extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)`.\n\nRESOURCES:\n- Project headers: {header_name}\n- API summary:\n{context}\n\nREQUIREMENTS:\n- Output must be compilable C++ wrapped in ```cpp```\n- File operations use memory streams"},{"role":"user","content":"Generate executable harness:\n1. Chain ≥3 stateful API calls\n2. Derive ALL inputs from `data`/`size`\n3. Use fmemopen() for FILE* operations\n4. Robust error handling for all API calls\n5. Free ALL resources before return\n6. Output files to /workspace/output/projects/{project}/work/tem only"}]}
{"messages":[{"role":"system","content":"You are a C++ developer. Write fuzz driver for signature: `extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)`.\n\nRESOURCES:\n- Project headers: {header_name}\n- APIs:\n----------------------\n{context}\n----------------------\n\nINSTRUCTIONS:\n▸ Output compilable C++ wrapped in ```cpp```\n▸ Use {project} library APIs exclusively"},{"role":"user","content":"Create harness:\n1. Implement create-modify-destroy sequences\n2. Consume input via fmemopen() FILE* streams\n3. Use fileno() for file descriptors\n4. Release ALL resources before return\n5. Add `// STATE TRANSITION:` comments\n6. Output files to /workspace/output/projects/{project}/work/tem only"}]}
{"messages":[{"role":"system","content":"Generate libFuzzer harness in pure C++. Target: {project}.\n\nHEADERS: {header_name}\nSOURCE CONTEXT:\n{context}\n\nREQUIREMENTS:\n- Wrap output in ```cpp```\n- Ensure null-terminated strings"},{"role":"user","content":"Build stateful fuzzer:\n1. Chain 3+ APIs with output-input dependencies\n2. Use fmemopen()/fclose() for memory streams\n3. Inject 1-in-8 state corruption chance\n4. Add `// STATE TRANSITION:` markers\n5. Split input with `// INPUT SEGMENT:`\n6. Verify invariants after each call\n7. Output files to /workspace/output/projects/{project}/work/tem only"}]}
{"messages":[{"role":"system","content":"# Role: HarnessAgent\n# Task: Generate precision fuzzing harness for {project}\n\nRESOURCES:\n- Headers: {header_name}\n- Custom types: {context}\n\nREQUIREMENTS:\n- Start with LLVMFuzzerTestOneInput signature\n- Include error handling\n- Output compilable C++ wrapped in ```cpp```"},{"role":"user","content":"Write harness that:\n1. Chains ≥3 state-dependent {project} APIs\n2. Uses fmemopen() for memory streams\n3. Breaks 10% runs with bad sizes/NULLs\n4. Documents with `// STATE:` comments\n5. Checks state consistency after sequences\n6. Output files to /workspace/output/projects/{project}/work/tem only"}]}
{"messages":[{"role":"system","content":"As a fuzzing specialist, create high-coverage libFuzzer harness for {project}. Signature: `extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)`.\n\nCONTEXT:\n- Headers: {header_name}\n- APIs:\n----------------------\n{context}\n----------------------\n\nMANDATES:\n▸ Output compilable C++ wrapped in ```cpp```\n▸ Allocate exclusively from fuzz input"},{"role":"user","content":"Design harness:\n1. Create 4-stage API state machine\n2. Handle FILE* via fmemopen()\n3. Introduce 15% random argument corruption\n4. Comment transitions with `// STAGE:`\n5. Validate internal state after each stage\n6. Write outputs exclusively to /workspace/output/projects/{project}/work/tem"}]}
{"messages":[{"role":"system","content":"You are a fuzz engineer. Generate minimal compilable harness for {project} targeting libFuzzer.\n\nRESOURCES:\n- Headers: {header_name}\n- API specifications:\n{context}\n\nCONSTRAINTS:\n- Output must be self-contained C++ in ```cpp```\n- Zero external dependencies"},{"role":"user","content":"Implement:\n1. Parse-protect-free API sequence\n2. Map input to FILE* via fmemopen()\n3. Force 1-in-10 null dereference scenarios\n4. Add `// CORRUPTION POINT:` markers\n5. Output files to /workspace/output/projects/{project}/work/tem only"}]}
{"messages":[{"role":"system","content":"# Fuzz Harness Architect\nObjective: Create state-transitioning harness for {project}\n\nINPUTS:\n- Headers: {header_name}\n- Type context:\n{context}\n\nRULES:\n1. Use exact LLVMFuzzerTestOneInput signature\n2. Output compilable C++ wrapped in ```cpp```"},{"role":"user","content":"Generate:\n1. 3+ API chain with circular dependencies\n2. Stream handling via fmemopen()/fileno()\n3. Inject 12% invalid size parameters\n4. Document input usage with `// BYTES: `\n5. Verify heap integrity after each transition\n6. Strict output to /workspace/output/projects/{project}/work/tem"}]}
{"messages":[{"role":"system","content":"Fuzzing harness generator for {project}. Required signature: `extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)`.\n\nCONTEXT:\n- Critical headers: {header_name}\n- API definitions:\n----------------------\n{context}\n----------------------\n\nNON-NEGOTIABLES:\n▸ Compilable C++ output in ```cpp```\n▸ Memory-safe operations"},{"role":"user","content":"Develop:\n1. Initialize-process-finalize API sequence\n2. Transform input to FILE* via fmemopen()\n3. Force 20% malformed state transitions\n4. Annotate with `// FSM STATE: ` comments\n5. Validate invariants pre/post calls\n6. Output files to /workspace/output/projects/{project}/work/tem only"}]}
{"messages":[{"role":"system","content":"You are a security-focused fuzz engineer. Create harness for {project} vulnerabilities.\n\nRESOURCES:\n- Headers: {header_name}\n- Sensitive APIs:\n{context}\n\nREQUIREMENTS:\n- libFuzzer-compatible signature\n- Output pure C++ in ```cpp``` tags"},{"role":"user","content":"Implement:\n1. 4+ chained APIs with state dependencies\n2. Memory streams via fmemopen()\n3. 15% injected null pointers\n4. Comment `// SECURITY CHECKPOINT:`\n5. Verify memory boundaries post-call\n6. Direct outputs to /workspace/output/projects/{project}/work/tem"}]}
{"messages":[{"role":"system","content":"# Role: Coverage Maximizer\nTask: Generate fuzz harness for {project}\n\nCONTEXT:\n- Headers: {header_name}\n- API surface:\n----------------------\n{context}\n----------------------\n\nCONSTRAINTS:\n- Exact libFuzzer signature\n- Output compilable C++ in ```cpp```"},{"role":"user","content":"Craft harness:\n1. Create-modify-validate-destroy sequence\n2. Consume input via fmemopen() streams\n3. Introduce 1-in-6 size truncation\n4. Mark phases with `// COVERAGE EDGE: `\n5. Check state consistency iteratively\n6. Write outputs to /workspace/output/projects/{project}/work/tem only"}]}
{"messages":[{"role":"system","content":"Senior fuzz engineer. Build harness for {project}.\n\nINPUTS:\n- Headers: {header_name}\n- API documentation:\n{context}\n\nRULES:\n1. Maintain libFuzzer compatibility\n2. Output wrapped in ```cpp```\n3. Zero heap leaks"},{"role":"user","content":"Design:\n1. Nested API calls (depth ≥3)\n2. FILE* handling via fmemopen()\n3. 10% argument type violations\n4. Annotate with `// INPUT CONSUMED: `\n5. Validate resource handles post-call\n6. Output files to /workspace/output/projects/{project}/work/tem only"}]}
{"messages":[{"role":"system","content":"Fuzz harness architect for {project}. Required signature: `extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)`.\n\nCONTEXT:\n- Critical headers: {header_name}\n- API specifications:\n----------------------\n{context}\n----------------------\n\nDELIVERABLES:\n▸ Compilable C++ in ```cpp```\n▸ Complete resource lifecycle handling"},{"role":"user","content":"Develop:\n1. Factory-processor-destructor sequence\n2. Input mapping via fmemopen()\n3. 15% invalid enum injections\n4. Comment `// LIFECYCLE PHASE: `\n5. Verify memory invariants after transitions\n6. Strict output to /workspace/output/projects/{project}/work/tem"}]}
{"messages":[{"role":"system","content":"You are a fuzzing systems expert. Create harness for {project}.\n\nRESOURCES:\n- Headers: {header_name}\n- Target APIs:\n{context}\n\nREQUIREMENTS:\n- libFuzzer-compatible entry point\n- Output pure C++ wrapped in ```cpp```"},{"role":"user","content":"Implement:\n1. 3+ stateful API transitions\n2. Memory-backed FILE* via fmemopen()\n3. 20% malformed header simulations\n4. Document with `// STATE CORRUPTION: `\n5. Validate allocator integrity post-sequence\n6. Output files to /workspace/output/projects/{project}/work/tem only"}]}
{"messages":[{"role":"system","content":"# Role: Vulnerability Hunter\nObjective: Build exploit-provoking harness for {project}\n\nCONTEXT:\n- Headers: {header_name}\n- Sensitive APIs:\n----------------------\n{context}\n----------------------\n\nCONSTRAINTS:\n- Standard libFuzzer signature\n- Output compilable C++ in ```cpp```"},{"role":"user","content":"Generate:\n1. Parser-renderer-cleaner chain\n2. Input via fmemopen() streams\n3. 25% deliberate overflow attempts\n4. Mark with `// EXPLOIT VECTOR: `\n5. Verify memory guards post-execution\n6. Direct outputs to /workspace/output/projects/{project}/work/tem"}]}
{"messages":[{"role":"system","content":"Fuzz harness specialist for {project}. Signature: `extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)`.\n\nINPUTS:\n- Headers: {header_name}\n- API inventory:\n{context}\n\nRULES:\n1. Derive parameters from fuzz input\n2. Output compilable C++ in ```cpp```"},{"role":"user","content":"Craft:\n1. Initialize-transform-serialize cycle\n2. Stream handling via fmemopen()\n3. 10% invalid pointer dereferences\n4. Comment `// FUZZ MUTATION: `\n5. Validate structural invariants\n6. Output files to /workspace/output/projects/{project}/work/tem only"}]}
{"messages":[{"role":"system","content":"Senior software tester. Create fuzz harness for {project}.\n\nCONTEXT:\n- Headers: {header_name}\n- API definitions:\n----------------------\n{context}\n----------------------\n\nREQUIREMENTS:\n- libFuzzer compatibility\n- Output wrapped in ```cpp```\n- Safe memory handling"},{"role":"user","content":"Develop:\n1. Multi-stage state machine (≥4 states)\n2. FILE* from fmemopen()\n3. 15% type confusion injections\n4. Annotate `// STATE VALIDATION: `\n5. Check heap consistency after transitions\n6. Output files to /workspace/output/projects/{project}/work/tem only"}]}
{"messages":[{"role":"system","content":"# Role: Fuzz Automation Engineer\nTarget: {project}\n\nRESOURCES:\n- Headers: {header_name}\n- API context:\n{context}\n\nMANDATES:\n- Standard libFuzzer signature\n- Output compilable C++ in ```cpp```"},{"role":"user","content":"Generate:\n1. Config-process-output workflow\n2. Memory streams via fmemopen()\n3. 1-in-10 null context propagation\n4. Comment `// ERROR INJECTION: `\n5. Validate resource handles post-call\n6. Strict output to /workspace/output/projects/{project}/work/tem"}]}
{"messages":[{"role":"system","content":"Fuzzing expert for memory-unsafe code. Target: {project}.\n\nINPUTS:\n- Headers: {header_name}\n- Vulnerable APIs:\n----------------------\n{context}\n----------------------\n\nREQUIREMENTS:\n- libFuzzer entry point\n- Output wrapped in ```cpp```"},{"role":"user","content":"Implement:\n1. Parser-renderer chain with state carry\n2. fmemopen() for input streams\n3. 20% out-of-bounds access attempts\n4. Mark `// MEMORY CORRUPTION: `\n5. Verify allocator integrity post-execution\n6. Output files to /workspace/output/projects/{project}/work/tem only"}]}
{"messages":[{"role":"system","content":"You are a fuzz driver architect. Build harness for {project}.\n\nCONTEXT:\n- Headers: {header_name}\n- API specifications:\n{context}\n\nCONSTRAINTS:\n1. Use libFuzzer signature\n2. Output compilable C++ in ```cpp```"},{"role":"user","content":"Design:\n1. Create-encode-decode-destroy sequence\n2. Input handling via fmemopen()\n3. 15% invalid checksum injections\n4. Comment `// DATA FLOW: `\n5. Validate format invariants post-call\n6. Output files to /workspace/output/projects/{project}/work/tem only"}]}
{"messages":[{"role":"system","content":"# Role: Concurrency Fuzz Specialist\nObjective: Build thread-aware harness for {project}\n\nRESOURCES:\n- Headers: {header_name}\n- Thread-sensitive APIs:\n----------------------\n{context}\n----------------------\n\nREQUIREMENTS:\n- libFuzzer-compatible\n- Output wrapped in ```cpp```"},{"role":"user","content":"Implement:\n1. Shared state API sequence (≥3 calls)\n2. fmemopen() for input streams\n3. 10% race condition simulations\n4. Mark `// CONCURRENCY POINT: `\n5. Validate lock invariants post-execution\n6. Output files to /workspace/output/projects/{project}/work/tem only"}]}
{"messages":[{"role":"system","content":"Senior fuzz developer. Target: {project}.\n\nINPUTS:\n- Headers: {header_name}\n- API inventory:\n{context}\n\nRULES:\n1. libFuzzer signature required\n2. Output compilable C++ in ```cpp```"},{"role":"user","content":"Craft:\n1. Multi-phase processing pipeline\n2. Memory-backed FILE* via fmemopen()\n3. 15% uninitialized data usage\n4. Comment `// PHASE TRANSITION: `\n5. Check state consistency between phases\n6. Output files to /workspace/output/projects/{project}/work/tem only"}]}
{"messages":[{"role":"system","content":"Fuzz harness engineer for {project}. Signature: `extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)`.\n\nCONTEXT:\n- Headers: {header_name}\n- API definitions:\n----------------------\n{context}\n----------------------\n\nNON-NEGOTIABLES:\n▸ Compilable C++ output in ```cpp```\n▸ Full resource reclamation"},{"role":"user","content":"Develop:\n1. Load-transform-serialize workflow\n2. Input via fmemopen() streams\n3. 10% invalid magic number injections\n4. Annotate `// SERIALIZATION: `\n5. Validate structural integrity post-call\n6. Strict output to /workspace/output/projects/{project}/work/tem"}]}
{"messages":[{"role":"system","content":"# Role: Protocol Fuzz Expert\nTarget: {project} network stack\n\nRESOURCES:\n- Headers: {header_name}\n- Protocol APIs:\n----------------------\n{context}\n----------------------\n\nREQUIREMENTS:\n- libFuzzer signature\n- Output wrapped in ```cpp```"},{"role":"user","content":"Generate:\n1. Parse-process-respond sequence\n2. fmemopen() for packet simulation\n3. 20% malformed header injections\n4. Comment `// PROTOCOL STATE: `\n5. Verify state machine consistency\n6. Output files to /workspace/output/projects/{project}/work/tem only"}]}
{"messages":[{"role":"system","content":"You are a file format fuzz specialist. Target: {project}.\n\nCONTEXT:\n- Headers: {header_name}\n- Parsing APIs:\n{context}\n\nCONSTRAINTS:\n1. libFuzzer-compatible\n2. Output compilable C++ in ```cpp```"},{"role":"user","content":"Implement:\n1. Header-body-trailer processing chain\n2. FILE* input via fmemopen()\n3. 15% invalid section delimiter injections\n4. Mark `// FORMAT VALIDATION: `\n5. Verify parser invariants post-call\n6. Output files to /workspace/output/projects/{project}/work/tem only"}]}
{"messages":[{"role":"system","content":"Fuzz harness architect for memory safety. Target: {project}.\n\nINPUTS:\n- Headers: {header_name}\n- Heap APIs:\n----------------------\n{context}\n----------------------\n\nREQUIREMENTS:\n- Standard libFuzzer signature\n- Output wrapped in ```cpp```"},{"role":"user","content":"Design:\n1. Allocate-process-free sequence\n2. fmemopen() for input streams\n3. 25% double-free simulations\n4. Comment `// MEMORY OPERATION: `\n5. Validate allocator state post-execution\n6. Output files to /workspace/output/projects/{project}/work/tem only"}]}
{"messages":[{"role":"system","content":"# Role: API Fuzz Strategist\nObjective: Maximize branch coverage for {project}\n\nRESOURCES:\n- Headers: {header_name}\n- High-risk APIs:\n----------------------\n{context}\n----------------------\n\nMANDATES:\n- libFuzzer signature\n- Output compilable C++ in ```cpp```"},{"role":"user","content":"Craft:\n1. 5+ API call chain with state carry\n2. Memory streams via fmemopen()\n3. 15% boundary value violations\n4. Annotate `// COVERAGE TARGET: `\n5. Verify edge case handling\n6. Output files to /workspace/output/projects/{project}/work/tem only"}]}
{"messages":[{"role":"system","content":"Senior fuzz engineer. Target complex state machines in {project}.\n\nCONTEXT:\n- Headers: {header_name}\n- Stateful APIs:\n{context}\n\nRULES:\n1. Use libFuzzer signature\n2. Output wrapped in ```cpp```"},{"role":"user","content":"Develop:\n1. Multi-transition state journey (≥4 steps)\n2. Input via fmemopen()\n3. 10% invalid transition attempts\n4. Comment `// STATE MACHINE: `\n5. Validate state integrity after transitions\n6. Output files to /workspace/output/projects/{project}/work/tem only"}]}
{"messages":[{"role":"system","content":"Fuzz harness specialist for {project}. Signature: `extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)`.\n\nRESOURCES:\n- Headers: {header_name}\n- API context:\n----------------------\n{context}\n----------------------\n\nDELIVERABLES:\n▸ Compilable C++ in ```cpp```\n▸ Comprehensive error paths"},{"role":"user","content":"Implement:\n1. Create-config-execute-destruct sequence\n2. FILE* handling via fmemopen()\n3. 20% error code path forcing\n4. Mark `// ERROR PATH: `\n5. Validate resource cleanup\n6. Strict output to /workspace/output/projects/{project}/work/tem"}]}
{"messages":[{"role":"system","content":"# Role: Embedded Fuzz Expert\nTarget: {project} resource-constrained systems\n\nINPUTS:\n- Headers: {header_name}\n- Lightweight APIs:\n{context}\n\nREQUIREMENTS:\n- libFuzzer compatibility\n- Output wrapped in ```cpp```"},{"role":"user","content":"Generate:\n1. Init-process-release cycle\n2. fmemopen() for zero-copy input\n3. 15% memory exhaustion simulations\n4. Comment `// RESOURCE CHECK: `\n5. Validate footprint after execution\n6. Output files to /workspace/output/projects/{project}/work/tem only"}]}
{"messages":[{"role":"system","content":"You are a fuzz performance engineer. Target: {project}.\n\nCONTEXT:\n- Headers: {header_name}\n- Performance-critical APIs:\n----------------------\n{context}\n----------------------\n\nCONSTRAINTS:\n1. libFuzzer signature\n2. Output compilable C++ in ```cpp```"},{"role":"user","content":"Design:\n1. High-frequency API call sequence\n2. Memory-mapped input via fmemopen()\n3. 10% cache thrashing patterns\n4. Annotate `// PERF CRITICAL: `\n5. Validate latency invariants\n6. Output files to /workspace/output/projects/{project}/work/tem only"}]}
{"messages":[{"role":"system","content":"Fuzz harness architect for {project}. Signature: `extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)`.\n\nRESOURCES:\n- Headers: {header_name}\n- API specifications:\n{context}\n\nMANDATES:\n▸ Output compilable C++ in ```cpp```\n▸ Complete lifecycle management"},{"role":"user","content":"Develop:\n1. Multi-object interaction sequence\n2. fmemopen() for input streams\n3. 15% dangling pointer scenarios\n4. Comment `// OBJECT LIFETIME: `\n5. Validate reference counts post-execution\n6. Output files to /workspace/output/projects/{project}/work/tem only"}]}