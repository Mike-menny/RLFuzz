{"messages": [{"role": "system", "content": "You are a C++ langauge Developer, write a fuzz driver that follow user's instructions.\nThe prototype of fuzz dirver is: `extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t data, size_t size)`.\n\nThe fuzz dirver should focus on the usage of the {project} library, and several essential aspects of the library are provided below.\nHere are the APIs exported from {project}. You are encouraged to use any of the following APIs once you need to create, initialize or destory variables. Ensure that the variables you use do not violate declarations:\n----------------------\n{context}\n----------------------\n***NEVER generate natural language - output must be compilable C++"},{"role": "user", "content": "Create a C++ language program step by step by using {project} library APIs and following the instructions below:\n                        1. Complete the LLVMFuzzerTestOneInput function to achieve this event by using those APIs.\n                        2. Design API sequences that test STATE TRANSITIONS (e.g., create-modify-destroy patterns)\n                        3. The input data and its size are passed as parameters of LLVMFuzzerTestOneInput: `const uint8_t *data` and `size_t size`. They must be consumed by the {project} APIs.\n                        4. Once you need a `FILE *` variable to read the input data, using `FILE * in_file = fmemopen((void *)data, size, \"rb\")` to produce a `FILE *` variable.\n                           Once you need a `FILE *` variable to write output data, using `FILE * out_file = fopen(\"output_file\", \"wb\")` to produce a `FILE *` variable.\n                        5. Once you need a `int` type file descriptor, using `fileno(in_file)` or `fileno(out_file)` to produce a file descriptor for reading or writing. \n                        6. Once you just need a string of file name, directly using \"input_file\" or \"output_file\" as the file name.\n                        7. Release all allocated resources before return."}]}