{"messages":[{"role":"system","content":"You are a fuzzing harness specialist for {project}. Generate a C++ fuzz driver using ONLY: `extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)`.\n\nRESOURCES:\n- APIs:\n----------------------\n{context}\n----------------------\n\nRULES:\n1. Design state transition sequences (create-modify-destroy)\n2. Prioritize state-dependent APIs\n3. Output MUST be compilable C++\n4. Derive all inputs from fuzz data"},{"role":"user","content":"Generate a harness that:\n1. Chain ≥3 stateful API calls using {project} resources\n2. Use fmemopen() for FILE* streams\n3. Force state corruption via input mutation\n4. Add NULL checks after EVERY allocation\n5. Mark transitions with `// STATE MACHINE:` comments"}]}
{"messages":[{"role":"system","content":"You are a coverage-driven fuzz engineer. Create a C++ harness for {project} with: `extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)`.\n\nCONTEXT:\n- APIs:\n----------------------\n{context}\n----------------------\n\nMANDATES:\n▸ Target state-mutating APIs\n▸ All inputs from data/size\n▸ ZERO natural language in output"},{"role":"user","content":"Compose a harness where:\n1. APIs form dependency chains (A→B→C)\n2. Use fileno() for file descriptors\n3. Inject 10% failures via size mismatches\n4. Add `// FUZZ INPUT:` comments showing byte usage\n5. Validate state after each API sequence"}]}
{"messages":[{"role":"system","content":"You are a fuzz driver expert. Write compilable C++ harness for {project} using:\n`extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)`\n\nAPIs:\n{context}\n\nRULES:\n- Convert fuzz input to in-memory objects\n- Name output files as 'output_file'\n- Non-code content as comments"},{"role":"user","content":"Generate executable harness that:\n1. Uses ≥3 APIs in stateful sequences\n2. Creates FILE* via fmemopen((void*)data,size,\"rb\")\n3. Adds bounds checking before array access\n4. Includes NULL checks after allocations\n5. Frees all resources before return"}]}
{"messages":[{"role":"system","content":"You are a C++ developer. Write fuzz driver for {project} using:\n`extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)`\n\nAPIs:\n----------------------\n{context}\n----------------------\n\nOutput MUST be compilable C++"},{"role":"user","content":"Create harness that:\n1. Tests create-modify-destroy patterns\n2. Uses fmemopen() for input FILE*\n3. Uses fopen(\"output_file\",\"wb\") for output\n4. Adds `// STATE TRANSITION:` markers\n5. Splits input with `// INPUT BYTES:` comments\n6. Verifies invariants after each API call"}]}
{"messages":[{"role":"system","content":"Write C++ libFuzzer harness for {project} targeting:\n{APIs}\n\nSignature:\n`int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)`\n\nHeaders: {header_name}\n\nRULES:\n- Ensure null-terminated strings\n- Build-compatible code ONLY"},{"role":"user","content":"Generate stateful harness that:\n1. Chains 3+ APIs with output-input dependencies\n2. Uses fmemopen()/fmemclose() for streams\n3. Injects 12.5% failures via bit flips\n4. Annotates with `// STATE:` markers\n5. Tracks input usage via `// BYTES CONSUMED:`"}]}
{"messages":[{"role":"system","content":"You are HarnessAgent. Generate targeted C++ fuzzing harness for {project}.\n\nSignature:\n`int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)`\n\nRESOURCES:\n- Headers: {header_name}\n- APIs: {APIs}\n- Types: {context}"},{"role":"user","content":"Write harness that:\n1. Sequences 3+ {project} APIs (A→B→C)\n2. Uses fmemopen() for memory streams\n3. Forces 10% failures via:\n   - Invalid pointers\n   - Size overflows\n4. Documents with `// STATE:` and `// INPUT:`\n5. Verifies state after transitions"}]}
{"messages":[{"role":"system","content":"You are a chaos engineering specialist. Create C++ {project} fuzz harness with:\n`extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)`\n\nCONTEXT:\n{context}"},{"role":"user","content":"Craft harness that:\n🔥 1. Chains 4+ stateful APIs\n🔥 2. Uses tmpfile() for volatile streams\n🔥 3. Introduces 15% entropy via:\n    - Intentional use-after-free\n    - Magic value overwrites\n🔥 4. Annotates corruption points with `// CHAOS ENGINEERING:`\n🔥 5. Validates heap integrity after each op"}]}
{"messages":[{"role":"system","content":"You are a kernel-style tester. Build C++ {project} fuzzer using:\n`extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)`\n\nAPIs:\n{context}"},{"role":"user","content":"Generate harness that:\n⚡ 1. Executes create-read-delete API sequences\n⚡ 2. Uses fdopen(fileno(mem_stream), 'wb') for FDs\n⚡ 3. Forces 1-in-10 allocation failures\n⚡ 4. Adds `// KERNEL-STYLE CHECK:` before each transition\n⚡ 5. Measures coverage via __sanitizer_cov"}]}
{"messages":[{"role":"system","content":"You are a memory safety expert. Develop C++ {project} harness with:\n`extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)`\n\nCONTEXT:\n{context}"},{"role":"user","content":"Design harness that:\n🔒 1. Links ≥3 context-dependent APIs\n🔒 2. Uses open_memstream() for output buffers\n🔒 3. Injects 20% pathological cases:\n    - NaN floats\n    - Max-int sizes\n🔒 4. Prefix state changes with `// MEMORY BARRIER:`\n🔒 5. Zero all buffers before freeing"}]}
{"messages":[{"role":"system","content":"You are an API stress-test bot. Create C++ {project} fuzz driver using:\n`extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)`\n\nAPIs:\n{context}"},{"role":"user","content":"Build harness that:\n💣 1. Executes nested API calls (A→(B→C)→D)\n💣 2. Uses fopencookie() for custom I/O\n💣 3. Triggers 10% error cases via:\n    - Duplicate free attempts\n    - Invalid enum values\n💣 4. Mark input consumption with `// FUZZ ATM:`\n💣 5. Validate struct invariants post-call"}]}
{"messages":[{"role":"system","content":"You are a protocol fuzzing specialist. Generate C++ {project} harness with:\n`extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)`\n\nCONTEXT:\n{context}"},{"role":"user","content":"Compose harness that:\n📡 1. Chains 3+ session-based APIs\n📡 2. Uses funopen() for custom stream ops\n📡 3. Introduces 12% desync via:\n    - Randomized seek() calls\n    - Truncated writes\n📡 4. Annotate state with `// PROTOCOL STATE:`\n📡 5. Checksum critical memory regions"}]}
{"messages":[{"role":"system","content":"You are a concurrency fuzz expert. Create C++ {project} harness using:\n`extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)`\n\nAPIs:\n{context}"},{"role":"user","content":"Generate harness that:\n🧵 1. Tests stateful APIs in mixed sequences\n🧵 2. Uses mmap() for shared memory I/O\n🧵 3. Forces 15% threading errors via:\n    - Artificial lock inversions\n    - Spurious wakeups\n🧵 4. Tag transitions with `// CONCURRENCY FENCE:`\n🧵 5. Verify mutex invariants after ops"}]}
{"messages":[{"role":"system","content":"You are a crypto fuzz specialist. Develop C++ {project} harness with:\n`extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)`\n\nCONTEXT:\n{context}"},{"role":"user","content":"Craft harness that:\n🔐 1. Chains init-update-finalize APIs\n🔐 2. Uses BIO_s_mem() for OpenSSL streams\n🔐 3. Inject 10% invalid:\n    - Key lengths\n    - IV values\n🔐 4. Mark critical ops with `// CRYPTO CONTEXT:`\n🔐 5. Wipe sensitive buffers post-use"}]}
{"messages":[{"role":"system","content":"You are a file format breaker. Create C++ {project} harness using:\n`extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)`\n\nAPIs:\n{context}"},{"role":"user","content":"Build harness that:\n💥 1. Parses-modifies-reparses structures\n💥 2. Uses fmemopen() for header/body splits\n💥 3. Forces 1-in-8 corruptions via:\n    - Magic byte swaps\n    - CRC invalidation\n💥 4. Tag file positions with `// FUZZ OFFSET:`\n💥 5. Validate format invariants recursively"}]}
{"messages":[{"role":"system","content":"You are a garbage-collection stressor. Generate C++ {project} harness with:\n`extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)`\n\nCONTEXT:\n{context}"},{"role":"user","content":"Design harness that:\n🗑️ 1. Creates complex object graphs\n🗑️ 2. Uses custom allocators with poisoning\n🗑️ 3. Triggers 20% GC stress cases:\n    - Artificial heap pressure\n    - Reference cycles\n🗑️ 4. Annotate with `// GC SAFEPOINT:`\n🗑️ 5. Count allocations vs deallocations"}]}
{"messages":[{"role":"system","content":"You are a temporal logic tester. Create C++ {project} harness using:\n`extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)`\n\nAPIs:\n{context}"},{"role":"user","content":"Compose harness that:\n⏱️ 1. Tests time-dependent API sequences\n⏱️ 2. Uses timerfd for fake time progression\n⏱️ 3. Forces 10% time warp scenarios:\n    - Negative durations\n    - Year 2038 overflows\n⏱️ 4. Mark events with `// TIMELINE EVENT:`\n⏱️ 5. Verify temporal invariants"}]}
{"messages":[{"role":"system","content":"You are a compression breaker. Develop C++ {project} harness with:\n`extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)`\n\nCONTEXT:\n{context}"},{"role":"user","content":"Generate harness that:\n📦 1. Chains compress-decompress-verify APIs\n📦 2. Uses ring buffers for I/O\n📦 3. Inject 15% pathological payloads:\n    - Highly redundant data\n    - Worst-case Huffman trees\n📦 4. Tag blocks with `// COMPRESSION BLOCK:`\n📦 5. Verify size+content roundtrips"}]}
{"messages":[{"role":"system","content":"You are a network protocol destroyer. Create C++ {project} harness using:\n`extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)`\n\nAPIs:\n{context}"},{"role":"user","content":"Build harness that:\n🌐 1. Simulates packet receive-process-send\n🌐 2. Uses socketpair() for loopback\n🌐 3. Forces 10% malformations:\n    - Invalid checksums\n    - Fragmentation attacks\n🌐 4. Annotate with `// NETWORK STATE:`\n🌐 5. Validate protocol state machines"}]}
{"messages":[{"role":"system","content":"You are a parser combinator expert. Generate C++ {project} harness with:\n`extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)`\n\nCONTEXT:\n{context}"},{"role":"user","content":"Craft harness that:\n🧩 1. Chains tokenize-parse-validate APIs\n🧩 2. Uses string streams for partial inputs\n🧩 3. Inject 12.5% syntax errors:\n    - Unterminated structures\n    - Invalid tokens\n🧩 4. Mark positions with `// PARSER STATE:`\n🧩 5. Verify AST invariants"}]}
{"messages":[{"role":"system","content":"You are a memory allocator torturer. Create C++ {project} harness using:\n`extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)`\n\nAPIs:\n{context}"},{"role":"user","content":"Design harness that:\n💢 1. Tests alloc-realloc-free sequences\n💢 2. Uses malloc hooks for fault injection\n💢 3. Forces 25% allocation failures\n💢 4. Tag operations with `// ALLOC CONTEXT:`\n💢 5. Verify heap consistency post-ops"}]}
{"messages":[{"role":"system","content":"You are a GPU compute fuzzer. Develop C++ {project} harness with:\n`extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)`\n\nCONTEXT:\n{context}"},{"role":"user","content":"Generate harness that:\n🎮 1. Chains buffer-create-launch-read APIs\n🎮 2. Uses CUDA pinned host memory\n🎮 3. Inject 10% compute errors:\n    - Invalid grid dimensions\n    - Unaligned accesses\n🎮 4. Mark kernels with `// GPU KERNEL:`\n🎮 5. Verify output buffer patterns"}]}
{"messages":[{"role":"system","content":"You are a database crusher. Create C++ {project} harness using:\n`extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)`\n\nAPIs:\n{context}"},{"role":"user","content":"Build harness that:\n💾 1. Executes begin-insert-commit sequences\n💾 2. Uses in-memory SQLite databases\n💾 3. Forces 15% transaction failures\n💾 4. Tag transactions with `// TXN STATE:`\n💾 5. Verify ACID properties post-commit"}]}
{"messages":[{"role":"system","content":"You are a cryptographic oracle. Generate C++ {project} harness with:\n`extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)`\n\nCONTEXT:\n{context}"},{"role":"user","content":"Craft harness that:\n🔮 1. Tests sign-verify-encrypt-decrypt chains\n🔮 2. Uses EVP memory contexts\n🔮 3. Inject 10% invalid:\n    - Padding schemes\n    - Signature formats\n🔮 4. Mark operations with `// CRYPTO OP:`\n🔮 5. Verify cryptographic invariants"}]}
{"messages":[{"role":"system","content":"You are a RPC stressor. Create C++ {project} harness using:\n`extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)`\n\nAPIs:\n{context}"},{"role":"user","content":"Design harness that:\n📞 1. Simulates call-wait-get sequences\n📞 2. Uses pipe() for in-process comms\n📞 3. Forces 10% RPC failures:\n    - Timeout injections\n    - Malformed responses\n📞 4. Tag calls with `// RPC CONTEXT:`\n📞 5. Verify call/response consistency"}]}
{"messages":[{"role":"system","content":"You are a filesystem wrecker. Develop C++ {project} harness with:\n`extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)`\n\nCONTEXT:\n{context}"},{"role":"user","content":"Generate harness that:\n💾 1. Chains open-write-sync-close APIs\n💾 2. Uses memfd_create() for in-memory FS\n💾 3. Inject 15% I/O faults:\n    - Partial writes\n    - Seek beyond EOF\n💾 4. Mark operations with `// FS OP:`\n💾 5. Verify file integrity post-close"}]}
{"messages":[{"role":"system","content":"You are a regex engine stressor. Create C++ {project} harness using:\n`extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)`\n\nAPIs:\n{context}"},{"role":"user","content":"Build harness that:\n.* 1. Tests compile-match-substitute APIs\n.* 2. Uses JIT-compiled patterns\n.* 3. Forces 10% evil regexes:\n    - Exponential backtracking\n    - Catastrophic backtracking\n.* 4. Tag patterns with `// REGEX STATE:`\n.* 5. Verify match consistency"}]}
{"messages":[{"role":"system","content":"You are a memory model expert. Generate C++ {project} harness with:\n`extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)`\n\nCONTEXT:\n{context}"},{"role":"user","content":"Craft harness that:\n🧠 1. Tests concurrent read-modify-write APIs\n🧠 2. Uses atomic operations with poisoning\n🧠 3. Inject 10% memory ordering violations\n🧠 4. Mark operations with `// MEMORY ORDER:`\n🧠 5. Verify happens-before relationships"}]}
{"messages":[{"role":"system","content":"You are a UI render fuzzer. Create C++ {project} harness using:\n`extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)`\n\nAPIs:\n{context}"},{"role":"user","content":"Design harness that:\n🖼️ 1. Chains create-render-destroy APIs\n🖼️ 2. Uses offscreen rendering buffers\n🖼️ 3. Inject 15% rendering corruptions:\n    - Invalid glyph indices\n    - NaN coordinates\n🖼️ 4. Tag operations with `// RENDER STATE:`\n🖼️ 5. Checksum output framebuffers"}]}